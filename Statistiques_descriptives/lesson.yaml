
- Class: meta
  Course: TP1-TC-CI
  Lesson: Statistiques descriptives
  Author: Laurent Doyen
  Type: Standard
  Organization: IUT2 Grenoble - TC
  Version: 1
  
- Class: text
  Output: Bienvenu dans cette deuxième leçon du premier TP où nous allons explorer les fonctionnalités de base pour faire des statistiques descriptives avec R.
    Durand ce semestre nous utiliserons très régulièrement les instructions présentées dans cette leçon.
    L'idée est de vous en faire une première présentation rapide. Nous reviendrons ensuite largement sur ces différentes instructions.

- Class: text
  Output: R permet très simplement de générer des nombres de façon aléatoire en suivant différentes stratégies qui définissent ce qu'on appelle la loi de la variable aléatoire. 
    Dans cette leçon, nous allons explorer deux stratégies de simulation de suites de nombres aléatoires, c'est à dire deux lois de probabilité.

- Class: cmd_question
  Output: Afin de comprendre ce que nous allons faire commençons par comprendre le résultat de l'instruction 1:6. Tapez cette instruction.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='1:6')
  Hint: Tapez 1:6 puis appuyez sur la touche Entrée.

- Class: text
  Output: Vous voyez que l'instruction 1:6 génére un vecteur contenant tout les entiers compris entre 1 et 6.

- Class: cmd_question
  Output: Maintenant nous allons utiliser la instruction sample() pour simuler le résultat de 20 lancés successifs de dé. 
    Nous stoquerons le rsultat dans la variable data_de. Pour ce faire il faut taper l'instruction data_de <- sample(1:6, 20, replace=TRUE). A vous de jouer au dé !
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='data_de <- sample(1:6, 20, replace=TRUE)')
  Hint: Tapez data_de <- sample(1:6, 20, replace=TRUE) puis appuyez sur la touche Entrée.

- Class: cmd_question
  Output: Affichez le résultat des 20 lancés de dé.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='data_de')
  Hint: Tapez data_de puis appuyez sur la touche Entrée.

- Class: text
  Output: On a bien 20 valeurs comprises entre 1 et 6. Il semblerait donc bien que R sache lancer des dés.

- Class: text
  Output: L'instruction sample() que nous avons utilisé avez 3 arguments séparés par des virgules.
    Le premier argument 1:6 spécifie que l'on va tirer des valeurs aléatoirement parmis le vecteur 1:6, c'est à dire parmi les entiers compris entre 1 et 6.
    Le deuxième argument 20 spécifie qu'on va tirer 20 valeurs aléatoirement.
    Enfin, le dernier argument dit qu'on peut tirer plusieurs fois la même valeur, c'est un tirage avec remise (en anglais replace).

- Class: cmd_question
  Output: Afin de vérifier que les résulat l'instruction data_de <- sample(1:6, 20, replace=TRUE) est bien aléatoire. Tapez une deuxième fois la même instruction.
    Si vous êtes un peu fatigué, plutot que de retaper cette instruction vous pouvez appuyer sur le bouton flèche vers le haut.
    R affichera alors successivement les différentes instructions que vous avez déja tapé. 
    Et on peut ensuite revenir en avant dans les instructions avec la flèche vers le bas.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='data_de <- sample(1:6, 20, replace=TRUE)')
  Hint: Tapez data_de <- sample(1:6, 20, replace=TRUE) puis appuyez sur la touche Entrée.

- Class: cmd_question
  Output: Affichez les valeurs de data_de afin de vérifier que les résultats des 20 lancés de dé sont bien différents de la première expérience.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='data_de')
  Hint: Tapez data_de puis appuyez sur la touche Entrée.

- Class: cmd_question
  Output: Si vous avez compris, générez aléatoirement avec l'instruction sample, 100 lancés d'un dé à 7 faces et affectez le résultat à la variable data_de2.
  CorrectAnswer: data_de2 <- sample(1:7, 100, replace=TRUE)
  AnswerTests: omnitest(correctExpr='data_de2 <- sample(1:7, 100, replace=TRUE)')
  Hint: Relisez l'explication précédente donnant le sens des trois arguments que nous avons utilisez dans la instruction sample. N'oubliez pas d'affecter le résultat à la variable data_de2.

- Class: text
  Output: Avec un dé tout les entiers compris entre 1 et 6 ont tous autant de chances d'apparaitre. 
    Il existe une autre loi dite uniforme sur [0,1] dont le principe est similaire, sauf que ce sont tous les nombres de l'intervalle [0,1] qui ont chacun autant de chances d'être choisis.

- Class: cmd_question
  Output: Pour simuler des nombres celon la loi uniforme sur [0,1] avec R, il faut utiliser l'instruction runif().
    Le seul argument à ajouter à l'instruction est combien on veut simuler de nombres. Affectez au vecteur data_unif le résultat de 20 simulations celon la loi uniforme sur [0,1].
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='data_unif <- runif(20)')
  Hint: Tapez data_unif <- runif(20) puis appuyez sur la touche Entrée.

- Class: cmd_question
  Output: Affichez les valeur de data_unif afin de vérifier que vous venez bien de simuler 20 nombres compris entre 0 et 1.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='data_unif')
  Hint: Tapez data_unif puis appuyez sur la touche Entrée.

- Class: text
  Output: Pour avoir accés au cinquième élément du vecteur data_unif, il faut taper data_unif[5].
    Vous pouvez remplacer le 5 par un vecteur qui indiquera alors les indices des éléments auxquels vous voulez avoir accés.
    Par exemple, vous savez que l'instruction 1:6 génére un vecteur contenant les entiers de 1 à 6.
    Ainsi, data_unif[1:6] va afficher les 6 premiers éléments du vecteur data_unif. 

- Class: cmd_question
  Output: A votre tour maintenant d'afficher par la même méthode les cinq premiers éléments de data_unif. 
    Si vous avez un mac, pour afficher le symbole [ il faut maintenir appuyé les touches alt et grosse flèche vers le haut (celle des majuscules non permanente) puis appuyer sur la touche parenthèse ouvrante.
    Pour le symbole ], c'est la même chose avec la touche parenthèse fermante.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='data_unif[1:5]')
  Hint: Tapez data_unif[1:5] puis appuyez sur la touche Entrée. Si vous avez un mac, pour afficher le symbole [ il faut maintenir appuyé les touches alt et grosse flèche vers le haut (celle des majuscules non permanente) puis appuyer sur la touche parenthèse ouvrante.
    Pour le symbole ], c'est la même chose avec la touche parenthèse fermante.

- Class: exact_question
  Output: Quelle est la somme des cinq permiers éléments du vecteur data_unif que vous venez de faire afficher ?
    Si ce petit calcul mental vous pose problème, n'oubliez pas que R est aussi une calculette.
  AnswerTests: omnitest(correctVal = sum(data_unif[1:5]))
  Hint: Demandez à R de faire la somme des différents éléments que vous venez d'afficher.

- Class: cmd_question
  Output: En fait, il existe une instruction R très simple pour faire ce calcul. C'est l'instruction sum(). 
    Utilisez cette instruction pour faire encore une fois la somme des 5 premiers éléments du vecteur data_unif.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='sum(data_unif[1:5])')
  Hint: Tapez sum(data_unif[1:5]) puis appuyez sur la touche Entrée, afin de vérifiez que vous avez bien simulé 20 valeurs selon une loi uniforme.

- Class: text
  Output: Vérifiez que les deux méthodes de calcul donnent bien le même résultat ?

- Class: cmd_question
  Output: Pour connaître la dimension d'un vecteur, on peut utiliser l'instruction length(). 
    Utilisez cette instruction pour vérifier que la dimension du dernier jeu de données simulées (data_unif) est bien 20.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='length(data_unif)')
  Hint: Tapez length(data_unif) puis appuyez sur la touche Entrée, afin de vérifiez que vous avez bien simulé 20 valeurs selon une loi uniforme.

- Class: exact_question
  Output: Vous devez sans doute vous souvenir que la moyenne (de vos notes ou quoi que se soit d'autre) correspond à la somme des éléments divisée par le nombre d'éléments sommés.
    En conséquence, utilisez les instructions sum() et length() vu précédemment pour calculer la moyenne des valeurs du vecteur data_unif.
  CorrectAnswer: sum(data_unif)/length(data_unif)
  AnswerTests: omnitest(correctVal = sum(data_unif)/length(data_unif))
  Hint: Calculez la moyenne des éléments du vecteur data_unif en faisant la somme des éléments (à l'aide de l'instruction sum()) divisé par le nombre d'éléments (àl'aide de l'instruction length()).

- Class: cmd_question
  Output: En R il existe une méthode beaucoup plus simple pour calculer la moyenne.
    Elle consiste à utiliser l'instruction mean(), en effet mean signifie moyenne en anglais.
    Utilisez cette instruction pour calculer à nouveau la moyenne des éléments du vecteur data_unif.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='mean(data_unif)')
  Hint: Tapez mean(data_unif) puis appuyez sur la touche Entrée.

- Class: text
  Output: Alors les deux moyennes correspondent elles bien ?

- Class: cmd_question
  Output: L'instruction permettant de calculer la variance est var().
    Utilisez cette instruction pour calculer la variance des éléments du vecteur data_unif.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='var(data_unif)')
  Hint: Tapez var(data_unif) puis appuyez sur la touche Entrée.

- Class: cmd_question
  Output: Vous vous souvenez sans doute que l'écart type est la racine carrée de la variance.
    J'espère que vous vous souvenez quelle est l'instruction permetant de calculer la racine carrée en R.
    En effet, vous devez maintenant utiliser cette instruction et la fonction var pour calculer l'écart type des éléments du vecteur data_unif.
    Un indice, racine carrée se dit square root en anglais.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='sqrt(var(data_unif))')
  Hint: Pour calculer l'écart type, prenez la racine carrée (sqrt()) de la variance (var()) de data_unif.

- Class: cmd_question
  Output: Il existe un méthode plus simple pour calculer l'écart type, elle consiste à utiliser l'instruction sd().
    En effet, écart type se traduit en anglais par standard deviation, d'où les initiales.
    Utilisez l'instruction sd() pour calculer la variance des éléments du vecteur data_unif.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='sd(data_unif)')
  Hint: Tapez sd(data_unif) puis appuyez sur la touche Entrée.

- Class: cmd_question
  Output: L’instruction sort(y) classe les éléments du vecteur y du plus petit au plus grand (en anglais sort signifie trier).
    Utilisez cette instruction pour classer les éléments du vecteur data_unif du plus petit au plus grand. Vous affecterez le résultat à la variable data_unif2.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='data_unif2 <- sort(data_unif)')
  Hint: Tapez data_unif2 <- sort(data_unif) puis appuyez sur la touche Entrée.

- Class: cmd_question
  Output: Et affichez data_unif2 pour vérifier que les résultats sont maintenant bien triés par ordre croissant.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='data_unif2 <- data_unif2')
  Hint: Tapez data_unif2 puis appuyez sur la touche Entrée.



- Class: text
  Output: L'année dernière, en statistiques descriptives, nous vous avons appris la notion de médiane et de quartile.
    Rappelez-vous que la médiane correspond à une valeur du caractère qui coupe en deux la série statistique, il y a autant de valeurs plus petite que de valeurs plus grande que la médiane.
    Les quartiles c'est la même chose mais on coupe en 4. Et pour couper en 4 il faut 3 quartiles.
    Tout cela se généralise avec la notion de quantile.

- Class: text
  Output: Les quantiles vont être une notion très importante de ce cours de statistique. 
    Nous reviendrons largement dessus par la suite pour bien en préciser le sens.
    L'idée est maintenant simplement de prendre connaissance avec cette notion de quantile.

- Class: text
  Output: La médiane correspond au quantile d'ordre 0.5. Car il y a 50% des valeurs du caractère qui sont plus petite que la médiane (et les 50% restantes sont plus grandes).
    Le premier quartile correspond au quantile d'ordre 0.25. Car il y a 25% des valeurs du caractère qui sont plus petite que le premier quartile.

- Class: exact_question
  Output: En conséquence quel est l'ordre du troisième quartile ?
  CorrectAnswer: 0.75
  AnswerTests: omnitest(correctVal = 0.75)
  Hint: La médiane est en fait le deuxième quartile.
    La médiane est aussi le quantile d'ordre 0.5.
    Le premier quartile est le quantile d'ordre 0.25.
    Au final, quel doit être l'ordre du troisième quartile ?

- Class: cmd_question
  Output: Ainsi, pour trouver le troisième quartile des résultats contenus dans le jeux de données data_unif il faut taper l'instruction quantile(data_unif, probs=0.75).
    Utilisez le même type d'instruction pour trouver la médiane du jeux de données data_unif.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='quantile(data_unif, probs=0.5)')
  Hint: Tapez quantile(data_unif, probs=0.5) puis appuyez sur la touche Entrée.

- Class: exact_question
  Output: En conséquence quelle est la valeur de la médiane du vecteur data_unif que vous venez de calculer avec R ?
  CorrectAnswer: NULL
  AnswerTests: test_between(floor(quantile(data_unif, probs=0.5)[[1]]*1000)/1000, ceiling(quantile(data_unif, probs=0.5)[[1]]*1000)/1000)
  Hint: Il vous suffit de reprendre le résultat du calcul précédent.

- Class: exact_question
  Output: Quelle est la dimension de ce même vecteur data_unif ? 
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctVal = length(data_unif))
  Hint: Regarder un peu plus dans le TP ou utiliser l'instruction length() pour retrouver la dimension de data_unif.

- Class: exact_question
  Output: La médiane est telle que la moitié des valeurs de data_unif (soit 100/2=50) sont plus petites que la médiane, et la moitié des valeurs (soit 100/2=50) sont plus grandes.
    Ainsi, si vous classer par ordre croissant les valeurs de data_unif la médiane doit se trouver entre la 50ème et 51ème position.
    Afin de le vérifiez costruisez un vecteur de valeur donnant l'intervalle dans lequel doit se trouver la médiane.
  CorrectAnswer: sort(data_unif)[c(50,51)]
  AnswerTests: omnitest(correctVal = c(sort(data_unif)[50],sort(data_unif)[51]))
  Hint: Pour construire un vecteur il faut utiliser l'instruction c() et séparer les deux valeurs du vecteur par des virgules. 
    Pour classer par ordre croissant les valeurs il faut utiliser l'instruction sort(). 
    Pour récupérer une ou plusieurs valeurs d'un vecteur, il faut ecrire le nom du vecteur puis mettre entre crochets les indices des valeurs que l'on veut récupérer.
    La façon de faire des crochets sous mac a été décrite plus haut.
    Si vous n'arivez vraiement pas à faire cette question, vous pouvez la sotter avec l'instruction skip(), mais attention cela sera prise en compte dans la notation.

- Class: text
  Output: Comme vous pouvez le remarquer, la valeur de la médiane proposée par R est est bien dans l'intervalle où on s'attend à la trouver !

- Class: cmd_question
  Output: Maintenant vous allez demander à R de tracer l'histogramme correspondant du jeux de données data_unif.
    Pour ce faire il vous faut tapez l'instruction suivante plot(data_unif, freq=FALSE).
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='plot(data_unif, freq=FALSE)')
  Hint: Tapez plot(data_unif, freq=FALSE) puis appuyez sur la touche Entrée.

- Class: text
  Output: On s'attend à obtenir un histogramme relativement "plat" puisque théoriquement toutes les valeurs de l'intervalle [0,1] ont chacune autant de chance d'être tirées au hasard.
    En pratique qu'en pensez-vous ?

- Class: text
  Output: Pour finir nous allons vous apprendre à calculer une fréquence ou proportion en utilisant R.

- Class: cmd_question
  Output: L’instruction table(y) donne la table des effectifs du vecteur y. La première ligne donne les différentes valeurs du vecteur y. La seconde ligne donne, pour chaque valeur, l’effectif associé.
    Appliquez l'instruction table aux 100 lancés de dé à 7 faces que vous avez précédemment simulés et stockés dans la variable data_de2.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='table(data_de2)')
  Hint: Tapez table(data_de2) puis appuyez sur la touche Entrée.

- Class: exact_question
  Output: En conséquence, combien de fois parmis les 100 tirages aléatoires le dé à 7 faces a t'il pris la valeur 2.
  CorrectAnswer: table(data_de2)[[2]]
  AnswerTests: omnitest(correctVal = table(data_de2)[[2]])
  Hint: Servez-vous des résultats renvoyez précédemment par l'instruction table().

- Class: exact_question
  Output: En conséquence, quelle est fréquence d'apparition de la face 2 lors des 100 tirages aléatoires du dé à 7 faces ?
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctVal = table(data_de2)[[2]]/100)
  Hint: Servez-vous de la réponse à la question précédente, en plus vous devez bien vous souvenir que la fréquence d'apparition de la face 2 correspond au nombre de fois où la face 2 est apparue divisé par le nombre total de lancés de dé.

- Class: text
  Output: Il existe une autre métode pour calculer une fréquence avec R. Cette méthode à l'avantage de se généralisrer facilement à d'autres situations, comme nous allons le voir par la suite.

- Class: cmd_question
  Output: Tout d'abord, comme nous l'avons vu dans la leçon précédente, 
    l'instruction data_de2==2 permet de savoir quelles sont les tirages dont le résultat est 2.
    Tapez cette instruction. 
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='data_de2==2')
  Hint: Tapez data_de2==2 puis appuyez sur la touche Entrée.

- Class: text
  Output: Vous pouvez vérifiez dans le résultat précédent qu'on a une valeur TRUE à chaque fois que le résultat correspondant dans data_de2 est 2, sinon on a un FALSE.

- Class: text
  Output: Souvenez-vous que TRUE correspond pour R à la valeur 1 et FALSE à la valeur 0.

- Class: cmd_question
  Output: Donc, avec l'instruction sum(data_de2==2), vous allez savoir combien il y a eu de résultat du lancé de dé égales à 2.
    Tapez donc cette instruction.
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctExpr='sum(data_de2==2)')
  Hint: Tapez sum(data_de2==2) puis appuyez sur la touche Entrée.

- Class: text
  Output: Vérifiez que le résultat est bien le même que celui que vous avez déduit précédemment à partir des résultats de l'instruction table().

- Class: cmd_question
  Output: Maintenant pour calculer la fréquence d'apparition de la face 2 il suffit de diviser ce résultat par le nombre de jeté de dé.
   Utilisez l'instruction sum() pour calculer la fréquence d'apparition de la face 2 parmis les résultats de data_de2. 
  CorrectAnswer: NULL
  AnswerTests: omnitest(correctVal=sum(data_de2==2)/length(data_de2))&expr_uses_func('sum')
  Hint: Tapez sum(data_de2==2) puis appuyez sur la touche Entrée.

- Class: mult_question
  Output: Souhaitez-vous valider cette deuxième leçon sur Google Forms afin que votre enseignant sache que vous avez réalisé votre leçon 1 du TP 1. Vous serez ainsi noté en conséquence ?
  AnswerChoices: Oui;Non
  CorrectAnswer: NULL
  AnswerTests: submit_log()
  Hint: hint

- Class: text
  Output: Nous vous conseillons également de copier l'intégralité de la clé qui vient de s'imprimer juste au dessus (entre les deux guillemets après le symbol [1]) et de sauvegarder l'intégralité de cette clé dans votre ordinateur (dans un fichier ou un email). Outre le Google Forms que vous venez de valider, cette clé est la preuve du fait que vous avez bien fait votre leçon 2 du TP1.

- Class: text
  Output: Maintenant à vous de faire la dernière leçon de ce TP1.



